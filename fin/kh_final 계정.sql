DROP TABLE "STATUS";

CREATE TABLE "STATUS" (
   "STATUS_CD"   NUMBER    PRIMARY KEY,
   "STATUS_NM"   VARCHAR2(50)      NOT NULL
);
COMMENT ON COLUMN "STATUS"."STATUS_CD" IS '상태 코드';
COMMENT ON COLUMN "STATUS"."STATUS_NM" IS '상태 이름';


-- 회원 등급 테이블
DROP TABLE "MEMBER_GRADE";

CREATE TABLE "MEMBER_GRADE" (
   "GRADE_CD"   NUMBER      PRIMARY KEY,
   "GRADE_NM"   VARCHAR2(20)      NOT NULL
);

COMMENT ON COLUMN "MEMBER_GRADE"."GRADE_CD" IS '회원 등급 코드';
COMMENT ON COLUMN "MEMBER_GRADE"."GRADE_NM" IS '회원 등급 이름';


-- 회원 테이블
DROP TABLE "MEMBER";

CREATE TABLE "MEMBER" (
   "MEMBER_NO"   NUMBER      PRIMARY KEY,
   "MEMBER_ID"   VARCHAR2(20)      NOT NULL,
   "MEMBER_PW"   VARCHAR2(100)      NOT NULL,
   "MEMBER_NM"   VARCHAR2(15)      NOT NULL,
   "MEMBER_PHONE"   VARCHAR2(13)      NOT NULL,
   "MEMBER_EMAIL"   VARCHAR2(50)      NOT NULL,
   "MEMBER_ADDR"   VARCHAR2(200)      NULL,
   "ENROLL_DT"   DATE   DEFAULT SYSDATE   NOT NULL,
   "STATUS_CD"   NUMBER   REFERENCES STATUS,
   "GRADE_CD"   NUMBER   REFERENCES MEMBER_GRADE
);

COMMENT ON COLUMN "MEMBER"."MEMBER_NO" IS '회원 번호';
COMMENT ON COLUMN "MEMBER"."MEMBER_ID" IS '회원 아이디';
COMMENT ON COLUMN "MEMBER"."MEMBER_PW" IS '회원 비밀번호';
COMMENT ON COLUMN "MEMBER"."MEMBER_NM" IS '회원 이름';
COMMENT ON COLUMN "MEMBER"."MEMBER_PHONE" IS '회원 휴대폰 번호';
COMMENT ON COLUMN "MEMBER"."MEMBER_EMAIL" IS '회원 이메일';
COMMENT ON COLUMN "MEMBER"."MEMBER_ADDR" IS '회원 주소';
COMMENT ON COLUMN "MEMBER"."ENROLL_DT" IS '회원 가입일';
COMMENT ON COLUMN "MEMBER"."STATUS_CD" IS '상태 코드';
COMMENT ON COLUMN "MEMBER"."GRADE_CD" IS '회원 등급 코드';

-- 회원 번호 시퀀스
CREATE SEQUENCE SEQ_MEMBER_NO; 

-- 샘플 데이터 --

-- 상태 테이블
INSERT INTO STATUS VALUES(1, '정상');
INSERT INTO STATUS VALUES(2, '탈퇴');
INSERT INTO STATUS VALUES(3, '정지');
INSERT INTO STATUS VALUES(4, '삭제');
INSERT INTO STATUS VALUES(5, '블라인드');

SELECT * FROM STATUS;
COMMIT;

-- 회원 등급 테이블
INSERT INTO MEMBER_GRADE VALUES(1, '일반회원');
INSERT INTO MEMBER_GRADE VALUES(2, '관리자');

SELECT * FROM MEMBER_GRADE;
COMMIT;


-- 회원 테이블

INSERT INTO MEMBER
VALUES(SEQ_MEMBER_NO.NEXTVAL, 'user01', 'pass01!', '유저일',
       '010-1234-1234', 'user01@kh.or.kr', 
       '서울시 중구 남대문로 120 대일빌딩 2층 KH정보교육원',
       DEFAULT, 1, 1);

COMMIT;

ALTER TABLE MEMBER MODIFY STATUS_CD NUMBER DEFAULT 1;
ALTER TABLE MEMBER MODIFY GRADE_CD NUMBER DEFAULT 1;





-- 카테고리 테이블
DROP TABLE "CATEGORY";

CREATE TABLE "CATEGORY" (
   "CATEGORY_CD"   NUMBER      PRIMARY KEY,
   "CATEGORY_NM"   VARCHAR2(50)      NOT NULL
);

COMMENT ON COLUMN "CATEGORY"."CATEGORY_CD" IS '카테고리 코드';
COMMENT ON COLUMN "CATEGORY"."CATEGORY_NM" IS '카테고리 이름';


-- 게시판 테이블
DROP TABLE "BOARD";

CREATE TABLE "BOARD" (
   "BOARD_NO"   NUMBER      PRIMARY KEY,
   "BOARD_TITLE"   VARCHAR2(200)      NOT NULL,
   "BOARD_CONTENT"   CLOB      NOT NULL,
   "CREATE_DT"   DATE   DEFAULT SYSDATE   NOT NULL,
   "MODIFY_DT"   DATE      NULL,
   "READ_COUNT"   NUMBER   DEFAULT 0   NOT NULL,
   "MEMBER_NO"   NUMBER      REFERENCES MEMBER NOT NULL,
   "STATUS_CD"   NUMBER   DEFAULT 1 REFERENCES STATUS,
   "CATEGORY_CD"   NUMBER      REFERENCES CATEGORY
);

COMMENT ON COLUMN "BOARD"."BOARD_NO" IS '게시글 번호';
COMMENT ON COLUMN "BOARD"."BOARD_TITLE" IS '게시글 제목';
COMMENT ON COLUMN "BOARD"."BOARD_CONTENT" IS '게시글 내용';
COMMENT ON COLUMN "BOARD"."CREATE_DT" IS '작성일';
COMMENT ON COLUMN "BOARD"."MODIFY_DT" IS '마지막 수정일';
COMMENT ON COLUMN "BOARD"."READ_COUNT" IS '조회수';
COMMENT ON COLUMN "BOARD"."MEMBER_NO" IS '회원 번호';
COMMENT ON COLUMN "BOARD"."STATUS_CD" IS '게시글 상태 코드';
COMMENT ON COLUMN "BOARD"."CATEGORY_CD" IS '카테고리 코드';


DROP SEQUENCE SEQ_BOARD_NO;
CREATE SEQUENCE SEQ_BOARD_NO; -- 게시글 번호 시퀀스

-- 게시판 이미지 테이블
CREATE TABLE "BOARD_IMG" (
   "IMG_NO"   NUMBER      PRIMARY KEY,
   "IMG_PATH"   VARCHAR2(200)      NOT NULL,
   "IMG_NM"   VARCHAR2(30)      NOT NULL,
   "IMG_ORIGINAL"   VARCHAR2(100)      NOT NULL,
   "IMG_LEVEL"   NUMBER      NOT NULL,
   "BOARD_NO"   NUMBER  REFERENCES BOARD   NOT NULL
);

COMMENT ON COLUMN "BOARD_IMG"."IMG_NO" IS '이미지 번호';
COMMENT ON COLUMN "BOARD_IMG"."IMG_PATH" IS '이미지 경로';
COMMENT ON COLUMN "BOARD_IMG"."IMG_NM" IS '이미지명';
COMMENT ON COLUMN "BOARD_IMG"."IMG_ORIGINAL" IS '원본 이미지명';
COMMENT ON COLUMN "BOARD_IMG"."IMG_LEVEL" IS '이미지 위치 지정값 저장';
COMMENT ON COLUMN "BOARD_IMG"."BOARD_NO" IS '게시글 번호';

-- 게시판 이미지 번호 시퀀스
CREATE SEQUENCE SEQ_IMG_NO;

-- 게시판 이미지 샘플데이터 추가
INSERT INTO BOARD_IMG VALUES(
    SEQ_IMG_NO.NEXTVAL, '/resources/images/board/', 
    'sample4.gif', 'sample4.gif', 3, 
    (SELECT * FROM (
        SELECT BOARD_NO FROM BOARD
        WHERE STATUS_CD NOT IN(4,5)
        ORDER BY 1 DESC)
    WHERE ROWNUM = 1)
);
commit;

-- 삭제되지 않은 마지막 게시글 번호
SELECT * FROM (
    SELECT BOARD_NO FROM BOARD
    WHERE STATUS_CD NOT IN(4,5)
    ORDER BY 1 DESC)
WHERE ROWNUM = 1;




-- CATEGORY 테이블 데이터 추가
INSERT INTO CATEGORY VALUES(1, '잡담');
INSERT INTO CATEGORY VALUES(2, '질문');
INSERT INTO CATEGORY VALUES(3, '뉴스');
SELECT * FROM CATEGORY;

COMMIT;

-- PL/SQL을 이용한 게시판 샘플 데이터 500개 생성

BEGIN
    FOR N IN 1..500 LOOP
        INSERT INTO BOARD
        VALUES(SEQ_BOARD_NO.NEXTVAL,
                    SEQ_BOARD_NO.CURRVAL || '번째 게시글',
                    SEQ_BOARD_NO.CURRVAL || '번째 게시글 입니다.',
                    DEFAULT, DEFAULT, DEFAULT, 
                    1/*회원번호*/, FLOOR(DBMS_RANDOM.VALUE(1,6)),
                    FLOOR(DBMS_RANDOM.VALUE(1,4)));
    END LOOP;
    
    UPDATE BOARD SET STATUS_CD = 1
    WHERE STATUS_CD IN(2,3);

END;
/

SELECT * FROM BOARD ORDER BY BOARD_NO DESC;

-- 게시글 목록 조회
SELECT BOARD_NO, BOARD_TITLE, READ_COUNT,
    CASE WHEN SYSDATE - CREATE_DT < 1
        THEN TO_CHAR(CREATE_DT, 'HH:MI')
        ELSE TO_CHAR(CREATE_DT, 'YYYY-MM-DD')
    END "CREATE_DT",
    MEMBER_NO, MEMBER_NM, STATUS_CD, STATUS_NM, CATEGORY_CD, CATEGORY_NM
FROM BOARD B
JOIN MEMBER USING(MEMBER_NO)
JOIN STATUS S ON(S.STATUS_CD = B.STATUS_CD)
JOIN CATEGORY USING(CATEGORY_CD)
WHERE STATUS_CD != 4
ORDER BY BOARD_NO DESC;


CREATE TABLE PRACTICE(
    P_NO NUMBER PRIMARY KEY,
    P_NAME VARCHAR2(50) NOT NULL,
    P_LEVEL NUMBER NOT NULL
);


CREATE SEQUENCE SEQ_P_NO;

/* 반복 삽입 방법
    1. service에서 단일 insert DAO를 for문으로 반복 호출
        -> 구현이 간단하지만 속도, 부하 측면에서 좋지 않음
    
    2. INSERT ALL 사용
        -> PK를 나타내는 시퀀스 증가가 이루어지지 않음
        
    3. 서브 쿼리를 이용한 INSERT 
*/
INSERT INTO PRACTICE
SELECT SEQ_P_NO.NEXTVAL, A.* FROM
    (SELECT '테스트1' P_NAME, 1 PLEVEL FROM DUAL
        UNION ALL
    SELECT '테스트2' P_NAME, 2 PLEVEL FROM DUAL
        UNION ALL
    SELECT '테스트3' P_NAME, 3 PLEVEL FROM DUAL) A;


DELETE FROM BOARD_IMG
WHERE BOARD_NO = 504 AND IMG_LEVEL IN(0,3,3,3,2,1);
ROLLBACK;


UPDATE BOARD_IMG SET
IMG_PATH = ?,
IMG_NM = ?,
IMG_ORIGINAL = ?
WHERE BOARD_NO = ? AND IMG_LEVEL = ?;

INSERT INTO BOARD_IMG VALUES
(SEQ_IMG_NO.NEXTVAL, ?, ?, ?, ?, ?);

-- 조건에 맞는 전체 게시글 수
SELECT COUNT(*) FROM BOARD
JOIN MEMBER USING(MEMBER_NO)
WHERE BOARD.STATUS_CD != 4
--AND BOARD_TITLE LIKE '%' || 'sk' || '%' -- 제목
-- AND BOARD_CONTENT LIKE '%' || '1' || '%'; -- 내용
--AND (BOARD_TITLE LIKE '%' || '2' || '%'OR BOARD_CONTENT LIKE '%' || '1' || '%');
AND MEMBER_NM LIKE '%' || '유저일' || '%';

-- ORA-00918: column ambiguously defined
--> 조인한 테이블에 동일한 컬럼명이 있어서 어떤 컬럼을 호출하는지 모르겠다.


-- 댓글 테이블           
CREATE TABLE "REPLY" (
   "REPLY_NO"   NUMBER      PRIMARY KEY,
   "REPLY_CONTENT"   VARCHAR2(1000)      NOT NULL,
   "REPLY_CREATE_DT"   DATE   DEFAULT SYSDATE   NOT NULL,
   "BOARD_NO"   NUMBER   REFERENCES BOARD,
   "MEMBER_NO"   NUMBER   REFERENCES MEMBER,
   "STATUS_CD"   NUMBER   DEFAULT 1 REFERENCES STATUS,
    "PARENT_REPLY_NO" NUMBER REFERENCES REPLY
);

COMMENT ON COLUMN "REPLY"."REPLY_NO" IS '댓글 번호';
COMMENT ON COLUMN "REPLY"."REPLY_CONTENT" IS '댓글 내용';
COMMENT ON COLUMN "REPLY"."REPLY_CREATE_DT" IS '댓글 작성일';
COMMENT ON COLUMN "REPLY"."BOARD_NO" IS '게시글 번호';
COMMENT ON COLUMN "REPLY"."MEMBER_NO" IS '회원 번호';
COMMENT ON COLUMN "REPLY"."STATUS_CD" IS '상태 코드';           
COMMENT ON COLUMN "REPLY"."PARENT_REPLY_NO" IS '부모 댓글 번호';        

DROP SEQUENCE SEQ_REPLY_NO;
CREATE SEQUENCE SEQ_REPLY_NO; -- 댓글 번호 시퀀스

INSERT INTO REPLY VALUES(SEQ_REPLY_NO.NEXTVAL, '부모1', SYSDATE, 521, 1, 1, NULL);
INSERT INTO REPLY VALUES(SEQ_REPLY_NO.NEXTVAL, '부모1-자식1', SYSDATE, 521, 1, 1, 1);
INSERT INTO REPLY VALUES(SEQ_REPLY_NO.NEXTVAL, '부모1-자식2', SYSDATE, 521, 1, 1, 1);
INSERT INTO REPLY VALUES(SEQ_REPLY_NO.NEXTVAL, '부모1-자식3', SYSDATE, 521, 1, 1, 1);

INSERT INTO REPLY VALUES(SEQ_REPLY_NO.NEXTVAL, '부모2', SYSDATE, 521, 1, 1, NULL);
INSERT INTO REPLY VALUES(SEQ_REPLY_NO.NEXTVAL, '부모3', SYSDATE, 521, 1, 1, NULL);
INSERT INTO REPLY VALUES(SEQ_REPLY_NO.NEXTVAL, '부모4', SYSDATE, 521, 1, 1, NULL);

INSERT INTO REPLY VALUES(SEQ_REPLY_NO.NEXTVAL, '부모2-자식1', SYSDATE, 521, 1, 1, 5);
INSERT INTO REPLY VALUES(SEQ_REPLY_NO.NEXTVAL, '부모2-자식2', SYSDATE, 521, 1, 1, 5);
INSERT INTO REPLY VALUES(SEQ_REPLY_NO.NEXTVAL, '부모2-자식3', SYSDATE, 521, 1, 1, 5);


INSERT INTO REPLY VALUES(SEQ_REPLY_NO.NEXTVAL, '부모1-자식3-손자1', SYSDATE, 521, 1, 1, 4);
INSERT INTO REPLY VALUES(SEQ_REPLY_NO.NEXTVAL, '부모1-자식3-손자2', SYSDATE, 521, 1, 1, 4);
INSERT INTO REPLY VALUES(SEQ_REPLY_NO.NEXTVAL, '부모1-자식3-손자3', SYSDATE, 521, 1, 1, 4);

COMMIT;



-- 계층형 쿼리(START WITH, CONNECT BY, ORDER SIBLINGS BY)
-- 상위 타입과 하위 타입간의 관계를 계층식으로 표현할 수 있게 하는 질의어(SELECT)

-- START WITH : 상위 타입(부모)으로 사용될 행을 지정(서브쿼리 O)
-- CONNECT BY : 상위 타입과 하위 타입간의 관계를 규정
--  PRIOR 연산자와 같이 사용하여
--  현재 행 이전에 상위 타입이 있을지, 하위 타입이 있을지를 지정
-- CONNECT BY PRIOR 자식컬럼 = 부모컬럼 ( 부모 -> 자식 계층 구조)
--                  REPLY_NO    PARENT_REPLY_NO

-- CONNECT BY PRIOR 부모컬럼 = 자식컬럼 ( 자식 -> 부모 계층 구조)
--                  PARENT_REPLY_NO    REPLY_NO

-- ORDER SIBLINGS BY + 컬럼명 : 계층 구조를 쉽게 정렬

-- * 추가 기능: LEVEL 가상 컬럼
-- START WITH 로 지정된 행의 LEVEL을 1로 부여하고
-- 하위 계층으로 내려갈수록 단계별 LEVEL을 1씩 증가시켜서 표현

-- ** 주의 사항 : 계층형 쿼리 해석 순서
/*
    7 : SELECT 
    1 : FROM (+JOIN)
    
    2 : START WITH
    3 : CONNECT BY
    
    4 : WHERE
    5 : GROUP BY
    6 : HAVING
    8 : ORDER BY
    
    WHERE절이 계층형 쿼리보다 늦게 해석되기 때문에
    조건이 반영된 형태의 계층 구조를 조회하고 싶다면 
    FROM절에 서브쿼리(인라인뷰)를 사용해서 미리 조건에 맞는 형태의 행으로 구성
*/


-- 특정 게시글에서 삭제되지 않은 댓글 목록을 계층형으로 조회
SELECT LEVEL, R.* 
FROM (SELECT REPLY_NO, REPLY_CONTENT,  
    TO_CHAR(REPLY_CREATE_DT, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') REPLY_CREATE_DT,
    BOARD_NO, REPLY.STATUS_CD, PARENT_REPLY_NO, MEMBER_NO, MEMBER_NM
    FROM REPLY 
    JOIN MEMBER USING(MEMBER_NO)
    WHERE BOARD_NO = 521 AND REPLY.STATUS_CD = 1) R
START WITH PARENT_REPLY_NO IS NULL
CONNECT BY PRIOR REPLY_NO = PARENT_REPLY_NO
ORDER SIBLINGS BY REPLY_NO;


-----------------------------------------------------------
-- 채팅방
DROP TABLE CHAT_ROOM;
CREATE TABLE CHAT_ROOM (
   CHAT_ROOM_NO   NUMBER   PRIMARY KEY,
   TITLE   VARCHAR2(200)   NOT NULL,
   STATUS_CD NUMBER DEFAULT 1 REFERENCES STATUS ,
   MEMBER_NO NUMBER REFERENCES MEMBER
);

COMMENT ON COLUMN CHAT_ROOM.CHAT_ROOM_NO IS '채팅방번호';
COMMENT ON COLUMN CHAT_ROOM.TITLE IS '채팅방제목';
COMMENT ON COLUMN CHAT_ROOM.STATUS_CD IS '채팅방상태';
COMMENT ON COLUMN CHAT_ROOM.MEMBER_NO IS '회원번호(방 개설자)';

-- 채팅 내용
DROP TABLE CHAT_MESSAGE;
CREATE TABLE CHAT_MESSAGE (
   CM_NO   NUMBER   PRIMARY KEY,
   MESSAGE   VARCHAR2(4000)   NOT NULL,
   CREATE_DT   DATE DEFAULT SYSDATE,
   CHAT_ROOM_NO NUMBER   REFERENCES CHAT_ROOM,
   MEMBER_NO   NUMBER REFERENCES MEMBER
);

COMMENT ON COLUMN CHAT_MESSAGE.CM_NO IS '채팅메세지번호';
COMMENT ON COLUMN CHAT_MESSAGE.MESSAGE IS '작성한 채팅 메세지';
COMMENT ON COLUMN CHAT_MESSAGE.CREATE_DT IS '메세지 작성 시간';
COMMENT ON COLUMN CHAT_MESSAGE.CHAT_ROOM_NO IS '채팅방번호';
COMMENT ON COLUMN CHAT_MESSAGE.MEMBER_NO IS '회원번호';

-- 채팅방별 참여자
CREATE TABLE CHAT_ROOM_JOIN (
   MEMBER_NO NUMBER REFERENCES MEMBER,
   CHAT_ROOM_NO NUMBER REFERENCES CHAT_ROOM,
    PRIMARY KEY(MEMBER_NO, CHAT_ROOM_NO)
);


COMMENT ON COLUMN CHAT_ROOM_JOIN.MEMBER_NO IS '회원번호';
COMMENT ON COLUMN CHAT_ROOM_JOIN.CHAT_ROOM_NO IS '채팅방번호';


CREATE SEQUENCE SEQ_CR_NO; -- 채팅방 번호 시퀀스
CREATE SEQUENCE SEQ_CM_NO; -- 채팅 메세지 번호 시퀀스

-- 채팅방 생성
INSERT INTO CHAT_ROOM VALUES(SEQ_CR_NO.NEXTVAL, '테스트1', DEFAULT, 1/*회원번호*/);

-- 채팅방 참여
INSERT INTO CHAT_ROOM_JOIN VALUES(1/*회원번호*/, 1/*채팅방번호*/);
INSERT INTO CHAT_ROOM_JOIN VALUES(22/*회원번호*/, 1/*채팅방번호*/);

-- 채팅방 생성
INSERT INTO CHAT_ROOM VALUES(SEQ_CR_NO.NEXTVAL, '테스트2', DEFAULT, 22/*회원번호*/);

-- 채팅방 참여
INSERT INTO CHAT_ROOM_JOIN VALUES(1/*회원번호*/, 3/*채팅방번호*/);
INSERT INTO CHAT_ROOM_JOIN VALUES(22/*회원번호*/, 3/*채팅방번호*/);
INSERT INTO CHAT_ROOM_JOIN VALUES(23/*회원번호*/, 3/*채팅방번호*/);

-- 채팅방 목록 조회(채팅방 번호, 제목, 개설자 이름, 몇명 참여중(COUNT))
-- 조건 : 삭제되지 않은 방
-- 상관 쿼리 : 메인 쿼리의 조회 결과가 서브 쿼리에 영향을 미침
SELECT CHAT_ROOM_NO, TITLE, MEMBER_NM, 
    (SELECT COUNT(*) FROM CHAT_ROOM_JOIN J
    WHERE J.CHAT_ROOM_NO = R.CHAT_ROOM_NO) CNT
FROM CHAT_ROOM R
JOIN MEMBER USING (MEMBER_NO)
WHERE R.STATUS_CD = 1
ORDER BY 1 DESC;

-- CHAT_MESSAGE 테이블 MESSAGE 컬럼 NOT NULL 제약조건 제거
ALTER TABLE CHAT_MESSAGE MODIFY MESSAGE NULL;





















