<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
	<!-- mapper 시작태그에 namespace를 반드시 작성할 것 -->
	
	<!-- 
		[resultMap]
		- SELECT 조회 결과(ResultSet) 컬럼명과 컬럼값을 옮겨 담을 VO에 필드명이
		같지 않을 때 이를 매핑 시켜 SELECT시 자동으로 담기게하는 역할
		
		- 속성
			- type  : 연결할 VO (패키지명 + 클래스명 또는 별칭)
			- id    : 만들어진 resultMap을 지칭할 식별명(이름)
		
		<id> 태그		: PK 역할 컬럼 - 필드 매핑
		<result> 태그	: id 제외 나머지
	-->
	<resultMap type="edu.kh.fin.member.model.vo.Member" id="member_rm">
	
		<id property="memberNo" 			column="MEMBER_NO"/>
		
		<result property="memberId" 		column="MEMBER_ID" />
		<result property="memberPw" 		column="MEMBER_PW" />
		<result property="memberName" 		column="MEMBER_NM" />
		<result property="memberPhone" 		column="MEMBER_PHONE" />
		<result property="memberEmail" 		column="MEMBER_EMAIL" />
		<result property="memberAddress" 	column="MEMBER_ADDR" />
		<result property="enrollDate" 		column="ENROLL_DT" />
		<result property="statusCode" 		column="STATUS_CD" />
		<result property="gradeCode" 		column="GRADE_CD" />
		
	</resultMap>
	
	<!-- 
		SQL 작성 태그 속성
		- parameterType : SQL 호출 시 전달 받은 매개 변수의 자료형
		(자료형은 패키지 + 클래스명 또는 별칭으로 작성)
		
		(SELECT 에서만 사용 가능한 속성)
		- resultType	: SELECT 결과 열이 1개인 경우 해당 컬럼 값을 저장할 JAVA 자료형 작성
		- resultMap		: SELECT 결과 열이 N개인 경우 각 컬럼 값을 VO에 저장하기 위해 
							알맞게 매핑시켜둔 <resultMap> id 값 작성
	-->
	<!-- 
		마이바티스에서 사용하는 "#", "$" 기호
		"#" : pstmt		/ "$" : stmt
		
		ex) 전달 받은 파라미터 memberId = "user01"
		#{memberId}	-> 'user01'(양쪽 홑따옴표 추가(문자열만))
		${memberId}	->  user01 (아무것도 붙이지 않음)
	-->
	<!-- 로그인 -->
	<select id="login" parameterType="string" resultMap="member_rm">
		SELECT * FROM MEMBER 
		WHERE MEMBER_ID = #{memberId} 
		AND STATUS_CD = 1 
		AND GRADE_CD = 1
	</select>
	
	<!-- 아이디 중복 검사 -->
	<select id="idDUpCheck" parameterType="string" resultType="_int">
		SELECT COUNT(*) FROM MEMBER 
		WHERE MEMBER_ID = #{inputId} AND STATUS_CD != 2
	</select>
	
	<select id="emailDupCheck" parameterType="string" resultType="_int">
		SELECT COUNT(*) FROM MEMBER 
		WHERE MEMBER_EMAIL = #{inputEmail} AND STATUS_CD != 2
	</select>
	
	<insert id="signUp" parameterType="Member">
		INSERT INTO MEMBER VALUES(
			SEQ_MEMBER_NO.NEXTVAL, #{memberId}, #{memberPw}, #{memberName}, #{memberPhone},
			#{memberEmail}, #{memberAddress}, DEFAULT, DEFAULT, DEFAULT
		)
	</insert>
	
	<update id="updateMember" parameterType="Member">
		UPDATE MEMBER SET
		MEMBER_PHONE = #{memberPhone},
		MEMBER_EMAIL = #{memberEmail},
		MEMBER_ADDR = #{memberAddress}
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<select id="selectSavePw" resultType="string">
		SELECT MEMBER_PW FROM MEMBER 
		WHERE MEMBER_NO = #{memberNo} AND STATUS_CD != 2
	</select>
	
	<!-- 비밀번호 변경 -->
	<!-- parameterType="map" 생략 가능 -->
	<update id="updatePw" parameterType="map">
		UPDATE MEMBER SET
		MEMBER_PW = #{newPw}
		WHERE MEMBER_NO = #{memberNo}
	</update>
	<!-- 
		SQL 구문에 파라미터 작성하는 방법
		1. 파라미터가 단일 자료형 : #{변수명(아무거나)}
		2. 파라미터가 VO : #{필드명} (단, vo에 getter가 작성되어 있어야 함.)
		3. 파라미터가 Map : #{key값} -> 해당 위치에 value가 작성 됨.
		4. 파라미터가 List/Set : 동적 SQL forEach 태그 사용
	-->
	
	<update id="secession">
		UPDATE MEMBER SET
		STATUS_CD = 2
		WHERE MEMBER_NO = #{memberNo}
	</update>
	
	
	
	
	
	
	
	
	
</mapper>
