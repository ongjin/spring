unit AimFixHookunit;

interface

uses
  Windows, AddreUnit, Me2m4o1ryUnit;

Function AimFixSet : Boolean;
Procedure AimFix_Hack(Toggle: Boolean);

var
AimFixCopy, AimFixHook2: dword;

implementation

uses Main1F0mer;

Function AimFixSet : Boolean;
var
  ReadBuffer : Array [0..$1D9] of Byte;
  AimFixHook,Aim1lF80un0c : dword;
begin
   AimFixCopy := DWORD(VirtualAllocEx(hProcess, nil, $128, MEM_COMMIT, PAGE_EXECUTE_READWRITE));
  AimFixHook := DWORD(VirtualAllocEx(hProcess, nil, $128, MEM_COMMIT, PAGE_EXECUTE_READWRITE));
  AimFixHook2 := DWORD(VirtualAllocEx(hProcess, nil, $1, MEM_COMMIT, PAGE_EXECUTE_READWRITE));

  WPMArray(AimFixHook, '81 3C 24 FF FF FF FF 75 07 C7 04 24 FF FF FF FF');
  WPM4Byte(AimFixHook + 3, Cshell.addr  + AimFixAddr);
  WPM4Byte(AimFixHook + $C, AimFixCopy);
  JmpHook(AimFixHook + $10, RPM4Byte(Cshell.addr  + C0py4d43 + $90), 0);

  ReadProcessMemory(hProcess, Ptr(Cshell.addr  + AimFixAddr), @ReadBuffer, SizeOf(ReadBuffer), PNativeUInt(nil)^);
  WriteProcessMemory(hProcess, Ptr(AimFixCopy), @ReadBuffer, SizeOf(ReadBuffer), PNativeUInt(nil)^);

  CallHook(AimFixCopy + $8c, FindDestinationOfHook(Cshell.addr  + AimFixAddr + $8c), 0);
  CallHook(AimFixCopy + $a9, FindDestinationOfHook(Cshell.addr  + AimFixAddr + $a9), 0);
  CallHook(AimFixCopy + $c0, FindDestinationOfHook(Cshell.addr  + AimFixAddr + $c0), 0);
  CallHook(AimFixCopy + $fa, FindDestinationOfHook(Cshell.addr  + AimFixAddr + $fa), 0);
  CallHook(AimFixCopy + $101, FindDestinationOfHook(Cshell.addr  + AimFixAddr + $101), 0);
  CallHook(AimFixCopy + $126, FindDestinationOfHook(Cshell.addr  + AimFixAddr + $126), 0);
  CallHook(AimFixCopy + $12e, FindDestinationOfHook(Cshell.addr  + AimFixAddr + $12e), 0);
  CallHook(AimFixCopy + $14c, FindDestinationOfHook(Cshell.addr  + AimFixAddr + $14c), 0);
  CallHook(AimFixCopy + $153, FindDestinationOfHook(Cshell.addr  + AimFixAddr + $153), 0);

  JmpHook(AimFixCopy + $1C4, AimFixHook2, 0);
  CallHook(AimFixHook2, FindDestinationOfHook(Cshell.addr + AimFixAddr + $1C4), 0);
  JmpHook(AimFixHook2 + $5, AimFixCopy + $1C9, 0);

  JmpHook(AimFixCopy + $1D9, Cshell.addr  + AimFixAddr + $1D9, 0);      //이어주는 점프

  WPM4Byte(ModuleCopyAdr + C0py4d43 + $90, AimFixHook);       //이부분이 덤프 가로채는 부분
end;

Procedure AimFix_Hack(Toggle: Boolean);
const
  AimFixAsm: Array [0 .. 4] of Byte = ($83, $C4, $10, $90, $90);
begin
  if Toggle then
    WriteProcessMemory(hProcess, Pointer(AimFixHook2), @AimFixAsm, SizeOf(AimFixAsm), PNativeUint(nil)^)
  else
    CallHook(AimFixHook2, FindDestinationOfHook(cshell.addr + AimFixAddr + $1C4), 0);
end;

end.
