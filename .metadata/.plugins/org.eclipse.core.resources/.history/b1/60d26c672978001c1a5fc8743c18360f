package edu.kh.fin.common.aop;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

@Aspect // Advice + Pointcut 
@Component
public class AroundAspect {
	
	// slf4j import
	private Logger logger = LoggerFactory.getLogger(AroundAspect.class);
	
	// Around : 전처리(Before), 후처리(after)를 모두 해결하고자 할 때 사용하는 관점
	// ProceedingJoinPoint를 매개변수로 필수 사용
	// Proceeding : 진행
	// -> proceed() 메소드 사용 가능 --> 해당 메소드를 기준으로 Before, After가 구분됨.
	@Around()
	public Object aroundLog(ProceedingJoinPoint pp) {
		return null;
	}

}
